// ÁΩëÁªúÊ®°ÊãüÊµãËØï - ÁÆÄÂåñÊû∂ÊûÑÁâàÊú¨
const nock = require('nock')
const axios = require('axios')

// ÁÆÄÂåñÁöÑÊµãËØïÂ∑•ÂÖ∑
const simpleNetworkUtils = {
  async withSimpleMock(testFn) {
    nock.cleanAll()
    nock.disableNetConnect()
    try {
      await testFn()
    } finally {
      nock.cleanAll()
      nock.enableNetConnect()
    }
  }
}

describe('üåê ÁΩëÁªúÊ®°ÊãüÂô®ÊµãËØï', () => {
  describe('ü§ñ Claude API Ê®°Êãü', () => {
    it('Â∫îËØ•Ê®°ÊãüÊàêÂäüÁöÑClaudeÊ∂àÊÅØÂìçÂ∫î', async () => {
      await simpleNetworkUtils.withSimpleMock(async () => {
        // Áõ¥Êé•‰ΩøÁî®nockËøõË°åClaude API mock
        const scope = nock('https://api.anthropic.com')
          .post('/v1/messages')
          .delay(150)
          .reply(200, {
            id: 'msg_test123',
            type: 'message',
            role: 'assistant',
            content: [{
              type: 'text',
              text: 'This is a simulated Claude response for testing.'
            }],
            model: 'claude-3-5-sonnet-20241022',
            stop_reason: 'end_turn',
            stop_sequence: null,
            usage: {
              input_tokens: 10,
              output_tokens: 100
            }
          })

        // ÂèëÈÄÅËØ∑Ê±Ç
        const response = await axios.post('https://api.anthropic.com/v1/messages', {
          model: 'claude-3-5-sonnet-20241022',
          max_tokens: 1000,
          messages: [{ role: 'user', content: 'Hello' }]
        }, {
          headers: {
            'Authorization': 'Bearer test-token',
            'Content-Type': 'application/json',
            'anthropic-version': '2023-06-01'
          }
        })

        expect(response.status).toBe(200)
        expect(response.data.type).toBe('message')
        expect(response.data.role).toBe('assistant')
        expect(response.data.usage.output_tokens).toBe(100)
        expect(response.data.content[0].text).toContain('simulated Claude response')
        expect(scope.isDone()).toBe(true)
      })
    })

    it('Â∫îËØ•Ê®°ÊãüClaudeÊµÅÂºèÂìçÂ∫î', async () => {
      await simpleNetworkUtils.withSimpleMock(async () => {
        // Áõ¥Êé•‰ΩøÁî®nockËøõË°åÊµÅÂºèÂìçÂ∫îmock
        const scope = nock('https://api.anthropic.com')
          .post('/v1/messages')
          .delay(100)
          .reply(200, 'data: {"type":"message_start"}\n\ndata: {"type":"content_block_start"}\n\ndata: {"type":"content_block_delta","delta":{"text":"Hello"}}\n\ndata: {"type":"message_stop"}\n\n', {
            'content-type': 'text/event-stream',
            'cache-control': 'no-cache',
            'connection': 'keep-alive'
          })

        // Ê®°ÊãüÊµÅÂºèËØ∑Ê±Ç
        const response = await axios.post('https://api.anthropic.com/v1/messages', {
          model: 'claude-3-5-sonnet-20241022',
          stream: true,
          messages: [{ role: 'user', content: 'Stream test' }]
        }, {
          headers: {
            'Authorization': 'Bearer test-token',
            'Content-Type': 'application/json'
          }
        })

        expect(response.status).toBe(200)
        expect(response.headers['content-type']).toBe('text/event-stream')
        expect(response.headers['connection']).toBe('keep-alive')
        expect(scope.isDone()).toBe(true)
      })
    })

    it('Â∫îËØ•Ê®°ÊãüClaudeËÆ§ËØÅÈîôËØØ', async () => {
      await simpleNetworkUtils.withSimpleMock(async () => {
        // Áõ¥Êé•‰ΩøÁî®nockÊ®°Êãü401ËÆ§ËØÅÈîôËØØ
        const scope = nock('https://api.anthropic.com')
          .post('/v1/messages')
          .reply(401, {
            type: 'error',
            error: {
              type: 'authentication_error',
              message: 'Invalid API Key'
            }
          })

        await expect(axios.post('https://api.anthropic.com/v1/messages', {
          model: 'claude-3-5-sonnet-20241022',
          messages: [{ role: 'user', content: 'Test' }]
        }, {
          headers: { 'Authorization': 'Bearer invalid-token' }
        })).rejects.toMatchObject({
          response: {
            status: 401,
            data: {
              type: 'error',
              error: {
                type: 'authentication_error'
              }
            }
          }
        })
        expect(scope.isDone()).toBe(true)
      })
    })

    it('Â∫îËØ•Ê®°ÊãüClaudeÈÄüÁéáÈôêÂà∂ÈîôËØØ', async () => {
      await simpleNetworkUtils.withSimpleMock(async () => {
        // Áõ¥Êé•‰ΩøÁî®nockÊ®°Êãü429ÈÄüÁéáÈôêÂà∂ÈîôËØØ
        const scope = nock('https://api.anthropic.com')
          .post('/v1/messages')
          .reply(429, {
            type: 'error',
            error: {
              type: 'rate_limit_error',
              message: 'Rate limit exceeded'
            }
          }, {
            'retry-after': '60'
          })

        await expect(axios.post('https://api.anthropic.com/v1/messages', {
          messages: [{ role: 'user', content: 'Test' }]
        })).rejects.toMatchObject({
          response: {
            status: 429,
            data: {
              error: {
                type: 'rate_limit_error'
              }
            },
            headers: expect.objectContaining({
              'retry-after': '60'
            })
          }
        })
        expect(scope.isDone()).toBe(true)
      })
    })
  })

  describe('üîÆ Gemini API Ê®°Êãü', () => {
    it('Â∫îËØ•Ê®°ÊãüÊàêÂäüÁöÑGeminiÂìçÂ∫î', async () => {
      await simpleNetworkUtils.withSimpleMock(async () => {
        // Áõ¥Êé•‰ΩøÁî®nockÊ®°ÊãüGemini APIÔºàÁßªÈô§‰∏•Ê†ºheaderÂåπÈÖçÔºâ
        const scope = nock('https://generativelanguage.googleapis.com')
          .post('/v1beta/models/gemini-1.5-pro:generateContent')
          .delay(200)
          .reply(200, {
            candidates: [{
              content: {
                parts: [{
                  text: 'This is a simulated Gemini response for testing.'
                }],
                role: 'model'
              },
              finishReason: 'STOP',
              index: 0
            }],
            usageMetadata: {
              promptTokenCount: 10,
              candidatesTokenCount: 120,
              totalTokenCount: 130
            }
          })

        const response = await axios.post('https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent', {
          contents: [{ parts: [{ text: 'Hello Gemini' }] }]
        }, {
          headers: {
            'Authorization': 'Bearer test-token',
            'Content-Type': 'application/json'
          }
        })

        expect(response.status).toBe(200)
        expect(response.data.candidates[0].content.role).toBe('model')
        expect(response.data.usageMetadata.candidatesTokenCount).toBe(120)
        expect(scope.isDone()).toBe(true)
      })
    })

    it('Â∫îËØ•Ê®°ÊãüGeminiÊµÅÂºèÂìçÂ∫î', async () => {
      await simpleNetworkUtils.withSimpleMock(async () => {
        // Áõ¥Êé•‰ΩøÁî®nockÊ®°ÊãüGeminiÊµÅÂºèÂìçÂ∫î
        const scope = nock('https://generativelanguage.googleapis.com')
          .post('/v1beta/models/gemini-1.5-pro:streamGenerateContent')
          .reply(200, 'data: {"candidates":[{"content":{"parts":[{"text":"Hello "}],"role":"model"},"finishReason":null,"index":0}]}\n\ndata: {"candidates":[{"finishReason":"STOP","index":0}],"usageMetadata":{"candidatesTokenCount":80}}\n\n', {
            'content-type': 'text/event-stream',
            'cache-control': 'no-cache',
            'connection': 'keep-alive'
          })

        const response = await axios.post('https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:streamGenerateContent', {
          contents: [{ parts: [{ text: 'Stream test' }] }]
        }, {
          headers: { 'Authorization': 'Bearer test-token' }
        })

        expect(response.status).toBe(200)
        expect(response.headers['content-type']).toBe('text/event-stream')
        expect(scope.isDone()).toBe(true)
      })
    })

    it('Â∫îËØ•Ê®°ÊãüGemini API KeyÈîôËØØ', async () => {
      await simpleNetworkUtils.withSimpleMock(async () => {
        // Áõ¥Êé•‰ΩøÁî®nockÊ®°ÊãüGemini API KeyÈîôËØØ
        const scope = nock('https://generativelanguage.googleapis.com')
          .post('/v1beta/models/gemini-1.5-pro:generateContent')
          .reply(400, {
            error: {
              code: 400,
              message: 'API key not valid. Please pass a valid API key.',
              status: 'INVALID_ARGUMENT'
            }
          })

        await expect(axios.post('https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-pro:generateContent', {
          contents: [{ parts: [{ text: 'Test' }] }]
        })).rejects.toMatchObject({
          response: {
            status: 400,
            data: {
              error: {
                code: 400,
                status: 'INVALID_ARGUMENT'
              }
            }
          }
        })
        expect(scope.isDone()).toBe(true)
      })
    })
  })

  describe('üîê OAuth Á´ØÁÇπÊ®°Êãü', () => {
    it('Â∫îËØ•Ê®°ÊãüClaude OAuth Token‰∫§Êç¢', async () => {
      await simpleNetworkUtils.withSimpleMock(async () => {
        // Áõ¥Êé•‰ΩøÁî®nockÊ®°ÊãüClaude OAuth Token‰∫§Êç¢
        const scope = nock('https://claude.ai')
          .post('/api/oauth/token')
          .delay(250)
          .reply(200, {
            access_token: 'access_test123456789abcdef',
            refresh_token: 'refresh_test123456789abcdef',
            expires_in: 3600,
            token_type: 'Bearer',
            scope: 'openid profile'
          })

        const response = await axios.post('https://claude.ai/api/oauth/token', {
          grant_type: 'authorization_code',
          code: 'test-auth-code',
          client_id: 'test-client-id'
        })

        expect(response.status).toBe(200)
        expect(response.data.access_token).toMatch(/^access_/)
        expect(response.data.refresh_token).toMatch(/^refresh_/)
        expect(response.data.expires_in).toBe(3600)
        expect(response.data.token_type).toBe('Bearer')
        expect(scope.isDone()).toBe(true)
      })
    })

    it('Â∫îËØ•Ê®°ÊãüClaude TokenÂà∑Êñ∞', async () => {
      await simpleNetworkUtils.withSimpleMock(async () => {
        // Áõ¥Êé•‰ΩøÁî®nockÊ®°ÊãüClaude TokenÂà∑Êñ∞
        const scope = nock('https://claude.ai')
          .post('/api/oauth/token')
          .delay(150)
          .reply(200, {
            access_token: 'new_access_refreshed123456789',
            expires_in: 3600,
            token_type: 'Bearer'
          })

        const response = await axios.post('https://claude.ai/api/oauth/token', {
          grant_type: 'refresh_token',
          refresh_token: 'test-refresh-token'
        })

        expect(response.status).toBe(200)
        expect(response.data.access_token).toMatch(/^new_access_/)
        expect(response.data.expires_in).toBe(3600)
        expect(scope.isDone()).toBe(true)
      })
    })

    it('Â∫îËØ•Ê®°ÊãüGoogle OAuth TokenÂà∑Êñ∞', async () => {
      await simpleNetworkUtils.withSimpleMock(async () => {
        // Áõ¥Êé•‰ΩøÁî®nockÊ®°ÊãüGoogle OAuth TokenÂà∑Êñ∞
        const scope = nock('https://oauth2.googleapis.com')
          .post('/token')
          .delay(180)
          .reply(200, {
            access_token: 'google_access_refreshed123456789',
            expires_in: 3600,
            token_type: 'Bearer'
          })

        const response = await axios.post('https://oauth2.googleapis.com/token', {
          grant_type: 'refresh_token',
          refresh_token: 'google-refresh-token'
        })

        expect(response.status).toBe(200)
        expect(response.data.access_token).toMatch(/^google_access_/)
        expect(scope.isDone()).toBe(true)
      })
    })

    it('Â∫îËØ•Ê®°ÊãüOAuthÂà∑Êñ∞Â§±Ë¥•', async () => {
      await simpleNetworkUtils.withSimpleMock(async () => {
        // Áõ¥Êé•‰ΩøÁî®nockÊ®°ÊãüOAuthÂà∑Êñ∞Â§±Ë¥•
        const scope = nock('https://claude.ai')
          .post('/api/oauth/token')
          .delay(150)
          .reply(400, {
            error: 'invalid_grant',
            error_description: 'Invalid refresh token'
          })

        await expect(axios.post('https://claude.ai/api/oauth/token', {
          grant_type: 'refresh_token',
          refresh_token: 'invalid-refresh-token'
        })).rejects.toMatchObject({
          response: {
            status: 400,
            data: {
              error: 'invalid_grant'
            }
          }
        })
        expect(scope.isDone()).toBe(true)
      })
    })
  })

  describe('‚ö†Ô∏è ÁΩëÁªúÈîôËØØÂú∫ÊôØÊ®°Êãü', () => {
    it('Â∫îËØ•Ê®°ÊãüËøûÊé•Ë∂ÖÊó∂', async () => {
      await simpleNetworkUtils.withSimpleMock(async () => {
        // Áõ¥Êé•‰ΩøÁî®nockÊ®°ÊãüËøûÊé•Ë∂ÖÊó∂
        const scope = nock('https://timeout-test.com')
          .get('/test')
          .delay(1000) // Âª∂Ëøü1Áßí
          .replyWithError({ code: 'ETIMEDOUT', message: 'Request timeout' })

        const startTime = Date.now()
        await expect(axios.get('https://timeout-test.com/test', {
          timeout: 500 // ËÆæÁΩÆËæÉÁü≠ÁöÑË∂ÖÊó∂Êó∂Èó¥
        })).rejects.toThrow()
        
        const elapsed = Date.now() - startTime
        expect(elapsed).toBeLessThan(600) // Â∫îËØ•Âú®Ë∂ÖÊó∂Êó∂Èó¥ÂÜÖÂ§±Ë¥•
        expect(scope.isDone()).toBe(true)
      })
    })

    it('Â∫îËØ•Ê®°ÊãüËøûÊé•ÊãíÁªùÈîôËØØ', async () => {
      await simpleNetworkUtils.withSimpleMock(async () => {
        // Áõ¥Êé•‰ΩøÁî®nockÊ®°ÊãüËøûÊé•ÊãíÁªùÈîôËØØ
        const scope = nock('https://refused-test.com')
          .get('/test')
          .replyWithError({ code: 'ECONNREFUSED', message: 'Connection refused' })

        await expect(axios.get('https://refused-test.com/test')).rejects.toMatchObject({
          code: 'ECONNREFUSED'
        })
        expect(scope.isDone()).toBe(true)
      })
    })

    it('Â∫îËØ•Ê®°ÊãüDNSËß£ÊûêÂ§±Ë¥•', async () => {
      await simpleNetworkUtils.withSimpleMock(async () => {
        // Áõ¥Êé•‰ΩøÁî®nockÊ®°ÊãüDNSËß£ÊûêÂ§±Ë¥•
        const scope = nock('https://nonexistent-domain.com')
          .get('/test')
          .replyWithError({ code: 'ENOTFOUND', message: 'DNS lookup failed' })

        await expect(axios.get('https://nonexistent-domain.com/test')).rejects.toMatchObject({
          code: 'ENOTFOUND'
        })
        expect(scope.isDone()).toBe(true)
      })
    })

    it('Â∫îËØ•Ê®°ÊãüSSLËØÅ‰π¶ÈîôËØØ', async () => {
      await simpleNetworkUtils.withSimpleMock(async () => {
        // Áõ¥Êé•‰ΩøÁî®nockÊ®°ÊãüSSLËØÅ‰π¶ÈîôËØØ
        const scope = nock('https://ssl-error-test.com')
          .get('/test')
          .replyWithError({ code: 'DEPTH_ZERO_SELF_SIGNED_CERT', message: 'SSL certificate error' })

        await expect(axios.get('https://ssl-error-test.com/test')).rejects.toMatchObject({
          code: 'DEPTH_ZERO_SELF_SIGNED_CERT'
        })
        expect(scope.isDone()).toBe(true)
      })
    })

    it('Â∫îËØ•Ê®°ÊãüÈó¥Ê≠áÊÄßÁΩëÁªúÈîôËØØ', async () => {
      await simpleNetworkUtils.withSimpleMock(async () => {
        // ÁÆÄÂåñÈó¥Ê≠áÊÄßÈîôËØØÊµãËØïÔºöÂõ∫ÂÆöÊ®°ÂºèËÄå‰∏çÊòØÈöèÊú∫
        let callCount = 0
        const scope = nock('https://intermittent-test.com')
          .get('/test')
          .times(10)
          .reply(() => {
            callCount++
            // Ââç3Ê¨°Â§±Ë¥•ÔºåÂêé7Ê¨°ÊàêÂäüÔºåÁ°Æ‰øùÂèØÈ¢ÑÊµãÁöÑÁªìÊûú
            if (callCount <= 3) {
              return [500, { error: 'Service temporarily unavailable' }]
            } else {
              return [200, { success: true }]
            }
          })

        const results = []
        for (let i = 0; i < 10; i++) {
          try {
            const response = await axios.get('https://intermittent-test.com/test')
            results.push({ success: true, status: response.status })
          } catch (error) {
            results.push({ success: false, status: error.response?.status || 'ERROR' })
          }
        }

        const successes = results.filter(r => r.success).length
        const failures = results.filter(r => !r.success).length
        
        expect(successes).toBe(7) // Âõ∫ÂÆö7Ê¨°ÊàêÂäü
        expect(failures).toBe(3)  // Âõ∫ÂÆö3Ê¨°Â§±Ë¥•
        expect(scope.isDone()).toBe(true)
      })
    })

    it('Â∫îËØ•Ê®°ÊãüÊÖ¢ÈÄüÁΩëÁªú', async () => {
      await simpleNetworkUtils.withSimpleMock(async () => {
        // Áõ¥Êé•‰ΩøÁî®nockÊ®°ÊãüÊÖ¢ÈÄüÁΩëÁªú
        const scope = nock('https://slow-test.com')
          .get('/test')
          .delay(2000) // 2ÁßíÂª∂Ëøü
          .reply(200, { data: 'slow response' })

        const startTime = Date.now()
        const response = await axios.get('https://slow-test.com/test')
        const elapsed = Date.now() - startTime

        expect(response.status).toBe(200)
        expect(elapsed).toBeGreaterThan(1900) // Ëá≥Â∞ëÊé•Ëøë2Áßí
        expect(elapsed).toBeLessThan(2500) // ‰∏çË∂ÖËøá2.5ÁßíÔºàÁïô‰∫õ‰ΩôÈáèÔºâ
        expect(scope.isDone()).toBe(true)
      })
    })
  })

  describe('üîÑ ‰ª£ÁêÜÈÖçÁΩÆÊµãËØï', () => {
    it('Â∫îËØ•Ê®°ÊãüSOCKS5‰ª£ÁêÜËØ∑Ê±Ç', async () => {
      await simpleNetworkUtils.withSimpleMock(async () => {
        // ÁÆÄÂåñSOCKS5‰ª£ÁêÜÊµãËØï - Áõ¥Êé•Ê®°ÊãüÊàêÂäüÂìçÂ∫î
        const scope = nock('https://api.anthropic.com')
          .post('/v1/messages')
          .reply(200, {
            message: 'Request via SOCKS5 proxy successful',
            proxy_type: 'socks5',
            proxy_host: '127.0.0.1',
            proxy_port: 1080
          })

        const response = await axios.post('https://api.anthropic.com/v1/messages', {
          model: 'claude-3-5-sonnet-20241022',
          messages: [{ role: 'user', content: 'Proxy test' }]
        })

        expect(response.status).toBe(200)
        expect(response.data.message).toContain('SOCKS5 proxy successful')
        expect(response.data.proxy_type).toBe('socks5')
        expect(response.data.proxy_host).toBe('127.0.0.1')
        expect(response.data.proxy_port).toBe(1080)
        expect(scope.isDone()).toBe(true)
      })
    })

    it('Â∫îËØ•Ê®°ÊãüHTTP‰ª£ÁêÜËØ∑Ê±Ç', async () => {
      await simpleNetworkUtils.withSimpleMock(async () => {
        // ÁÆÄÂåñHTTP‰ª£ÁêÜÊµãËØï - Áõ¥Êé•Ê®°ÊãüÊàêÂäüÂìçÂ∫î
        const scope = nock('https://api.anthropic.com')
          .post('/v1/messages')
          .reply(200, {
            message: 'Request via HTTP proxy successful',
            proxy_type: 'http',
            proxy_auth: 'testuser:testpass'
          })

        const response = await axios.post('https://api.anthropic.com/v1/messages', {
          model: 'claude-3-5-sonnet-20241022',
          messages: [{ role: 'user', content: 'HTTP proxy test' }]
        })

        expect(response.status).toBe(200)
        expect(response.data.message).toContain('HTTP proxy successful')
        expect(response.data.proxy_type).toBe('http')
        expect(response.data.proxy_auth).toBe('testuser:testpass')
        expect(scope.isDone()).toBe(true)
      })
    })

    it('Â∫îËØ•Ê®°Êãü‰ª£ÁêÜËÆ§ËØÅÂ§±Ë¥•', async () => {
      await simpleNetworkUtils.withSimpleMock(async () => {
        // ÁÆÄÂåñ‰ª£ÁêÜËÆ§ËØÅÂ§±Ë¥•ÊµãËØï
        const scope = nock('https://api.anthropic.com')
          .post('/v1/messages')
          .replyWithError({ code: 'ECONNREFUSED', message: 'Proxy authentication required' })

        await expect(axios.post('https://api.anthropic.com/v1/messages', {
          messages: [{ role: 'user', content: 'Test' }]
        })).rejects.toMatchObject({
          code: 'ECONNREFUSED',
          message: expect.stringContaining('Proxy authentication required')
        })
        expect(scope.isDone()).toBe(true)
      })
    })
  })

  describe('üìä ÁΩëÁªúÁªüËÆ°ÂíåÈ™åËØÅ', () => {
    it('Â∫îËØ•Êèê‰æõÂáÜÁ°ÆÁöÑËØ∑Ê±ÇÁªüËÆ°‰ø°ÊÅØ', async () => {
      await simpleNetworkUtils.withSimpleMock(async () => {
        // ÁÆÄÂåñÁªüËÆ°‰ø°ÊÅØÊµãËØï - Áõ¥Êé•ÊµãËØïnockÁöÑpendingMocks
        const messagesScope = nock('https://api.anthropic.com')
          .post('/v1/messages')
          .reply(200, { message: 'test response' })

        const modelsScope = nock('https://api.anthropic.com')
          .get('/v1/models')
          .reply(200, { models: [] })

        // Âè™ÂèëÈÄÅmessagesËØ∑Ê±Ç
        await axios.post('https://api.anthropic.com/v1/messages', {
          messages: [{ role: 'user', content: 'Test' }]
        }, {
          headers: { 'Authorization': 'Bearer test' }
        })

        // È™åËØÅÁªüËÆ°‰ø°ÊÅØ
        expect(messagesScope.isDone()).toBe(true) // messages mockÂ∑≤Ë¢´Ë∞ÉÁî®
        expect(modelsScope.isDone()).toBe(false) // models mockÊú™Ë¢´Ë∞ÉÁî®
        expect(nock.pendingMocks().length).toBeGreaterThan(0) // ËøòÊúâpending mocks
      })
    })

    it('Â∫îËØ•ËÆ∞ÂΩïÁΩëÁªúËØ∑Ê±ÇÂéÜÂè≤', async () => {
      await simpleNetworkUtils.withSimpleMock(async () => {
        // ÁÆÄÂåñËÆ∞ÂΩïÊµãËØï - ‰∏ç‰ΩøÁî®nock recorderÔºåÁõ¥Êé•ÊµãËØïmockÁöÑËÆ∞ÂΩïÂäüËÉΩ
        const requestHistory = []
        
        const scope = nock('https://test-record-api.com')
          .post('/messages')
          .reply(function(uri, requestBody) {
            // ÊâãÂä®ËÆ∞ÂΩïËØ∑Ê±Ç
            requestHistory.push({
              method: 'POST',
              url: uri,
              timestamp: new Date(),
              body: requestBody
            })
            return [200, { message: 'recorded response' }]
          })

        await axios.post('https://test-record-api.com/messages', {
          messages: [{ role: 'user', content: 'Recording test' }]
        }, {
          headers: { 'Authorization': 'Bearer test' }
        })

        expect(requestHistory.length).toBeGreaterThan(0)
        expect(requestHistory[0]).toHaveProperty('method', 'POST')
        expect(requestHistory[0]).toHaveProperty('timestamp')
        expect(scope.isDone()).toBe(true)
      })
    })

    it('Â∫îËØ•È™åËØÅÊâÄÊúâÈ¢ÑÊúüËØ∑Ê±ÇÈÉΩË¢´Ë∞ÉÁî®', async () => {
      await simpleNetworkUtils.withSimpleMock(async () => {
        // ÁÆÄÂåñÈ™åËØÅÊµãËØï - ‰ΩøÁî®‰∏çÂêåÁöÑÂüüÂêçÈÅøÂÖçÂÜ≤Á™Å
        const scope = nock('https://test-verify-api.com')
          .post('/messages')
          .reply(200, { message: 'test response' })

        await axios.post('https://test-verify-api.com/messages', {
          messages: [{ role: 'user', content: 'Test' }]
        }, {
          headers: { 'Authorization': 'Bearer test' }
        })

        // È™åËØÅÊâÄÊúâmockÈÉΩË¢´Ë∞ÉÁî®‰∫Ü
        expect(scope.isDone()).toBe(true)
        expect(nock.pendingMocks().length).toBe(0)
      })
    })

    it('Â∫îËØ•Ê£ÄÊµãÊú™Ë∞ÉÁî®ÁöÑmock', async () => {
      await simpleNetworkUtils.withSimpleMock(async () => {
        // ÁÆÄÂåñÊú™Ë∞ÉÁî®mockÊ£ÄÊµãÊµãËØï - ‰ΩøÁî®‰∏çÂêåÁöÑÂüüÂêç
        const messagesScope = nock('https://test-detect-api.com')
          .post('/messages')
          .reply(200, { message: 'test response' })
        
        const modelsScope = nock('https://test-detect-api.com')
          .get('/models')
          .reply(200, { models: [] })

        // Âè™Ë∞ÉÁî®messages
        await axios.post('https://test-detect-api.com/messages', {
          messages: [{ role: 'user', content: 'Test' }]
        }, {
          headers: { 'Authorization': 'Bearer test' }
        })

        // È™åËØÅÊ£ÄÊµãÁªìÊûú
        expect(messagesScope.isDone()).toBe(true)
        expect(modelsScope.isDone()).toBe(false) // models mockÊ≤°Ë¢´Ë∞ÉÁî®
        expect(nock.pendingMocks().length).toBe(1) // ËøòÊúâ‰∏Ä‰∏™pending mock
        
        // Ê®°ÊãüÈ™åËØÅÂ§±Ë¥•
        const pendingMocks = nock.pendingMocks()
        if (pendingMocks.length > 0) {
          expect(() => {
            throw new Error(`Pending mocks not satisfied: ${pendingMocks.join(', ')}`)
          }).toThrow(/Pending mocks not satisfied/)
        }
      })
    })
  })

  describe('üß™ ÈõÜÊàêÊµãËØïÂú∫ÊôØ', () => {
    it('Â∫îËØ•ÊîØÊåÅÂª∂ËøüÊµãËØï', async () => {
      await simpleNetworkUtils.withSimpleMock(async () => {
        // ÁÆÄÂåñÂª∂ËøüÊµãËØï - ‰ΩøÁî®Ê≠£Á°ÆÁöÑÂüüÂêçÂíåË∑ØÂæÑ
        const fastScope = nock('https://test-fast-api.com')
          .post('/test')
          .delay(100)
          .reply(200, { result: 'fast' })
        
        const slowScope = nock('https://test-slow-api.com')
          .post('/test')
          .delay(1500) // Áº©Áü≠Êó∂Èó¥ÈÅøÂÖçË∂ÖÊó∂
          .reply(200, { result: 'slow' })

        // ÊµãËØïÂø´ÈÄüAPI
        const fastStartTime = Date.now()
        const fastResponse = await axios.post('https://test-fast-api.com/test', {})
        const fastLatency = Date.now() - fastStartTime
        
        expect(fastResponse.data.result).toBe('fast')
        expect(fastLatency).toBeGreaterThan(90)
        expect(fastLatency).toBeLessThan(300)
        
        // ÊµãËØïÊÖ¢ÈÄüAPI
        const slowStartTime = Date.now()
        const slowResponse = await axios.post('https://test-slow-api.com/test', {})
        const slowLatency = Date.now() - slowStartTime
        
        expect(slowResponse.data.result).toBe('slow')
        expect(slowLatency).toBeGreaterThan(1400)
        expect(slowLatency).toBeLessThan(1800)
        
        expect(fastScope.isDone()).toBe(true)
        expect(slowScope.isDone()).toBe(true)
      })
    })

    it('Â∫îËØ•ÊîØÊåÅÈáçËØïÊµãËØï', async () => {
      await simpleNetworkUtils.withSimpleMock(async () => {
        // ÁÆÄÂåñÈáçËØïÊµãËØï - ‰ΩøÁî®Áã¨ÁâπÂüüÂêçÈÅøÂÖçÂÜ≤Á™Å
        let attempts = 0
        const scope = nock('https://test-retry-api.com')
          .post('/endpoint')
          .times(3)
          .reply(() => {
            attempts++
            if (attempts <= 2) {
              return [500, { error: 'Server error' }]
            } else {
              return [200, { success: true, attempts }]
            }
          })

        // Ê®°ÊãüÈáçËØïËØ∑Ê±ÇÈÄªËæë
        let retryAttempts = 0
        for (let i = 0; i < 3; i++) {
          try {
            retryAttempts++
            const response = await axios.post('https://test-retry-api.com/endpoint', { data: 'test' })
            expect(response.status).toBe(200)
            break
          } catch (error) {
            if (i === 2) throw error // ÊúÄÂêé‰∏ÄÊ¨°ÈáçËØïÂ§±Ë¥•Â∞±ÊäõÂá∫ÈîôËØØ
            await new Promise(resolve => setTimeout(resolve, 10)) // Áº©Áü≠ÈáçËØïÂª∂Ëøü
          }
        }

        expect(retryAttempts).toBe(3) // Â∫îËØ•Â∞ùËØï‰∫Ü3Ê¨°Ôºà2Ê¨°Â§±Ë¥• + 1Ê¨°ÊàêÂäüÔºâ
        expect(scope.isDone()).toBe(true)
      })
    })
  })
})